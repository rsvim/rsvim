name: CI
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}
env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 3
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"
  RUST_BACKTRACE: "full"
jobs:
  softcheck:
    name: Soft Check
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: amannn/action-semantic-pull-request@v5
        if: ${{ github.ref != 'refs/heads/main' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: crate-ci/typos@master
      - name: Prettier
        run: |
          npm install -g prettier
          prettier --version
          echo "show PWD=${PWD}"
          echo "prettier --check *.md **/*.ts"
          prettier --check *.md **/*.ts
  check:
    name: Check
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: latest
      - name: Tsc
        run: |
          npm install -g typescript
          tsc --version
          echo "show PWD=${PWD}"
          echo "tsc"
          tsc
      - uses: Swatinem/rust-cache@v2
      - uses: mozilla-actions/sccache-action@v0.0.9
      - uses: dtolnay/rust-toolchain@stable
      # - uses: cargo-bins/cargo-binstall@main
      - name: Rustfmt
        run: cargo fmt --check
      - name: Taplo
        run: |
          curl -fsSL https://github.com/tamasfe/taplo/releases/latest/download/taplo-linux-x86_64.gz | gzip -d - | install -m 755 /dev/stdin /usr/local/bin/taplo
          # cargo binstall --force --no-confirm taplo-cli
          echo "Info: taplo --version"
          taplo --version
          echo "Info: taplo check"
          taplo check
          echo "Info: taplo fmt --check"
          taplo fmt --check
      - name: MSRV
        run: |
          mkdir ~/.cargo-msrv
          CARGO_MSRV_DIR="cargo-msrv-x86_64-unknown-linux-gnu-v0.18.4"
          curl --output ~/.cargo-msrv/cargo-msrv.tgz -fsSL https://github.com/foresterre/cargo-msrv/releases/download/v0.18.4/$CARGO_MSRV_DIR.tgz
          tar -xvzf ~/.cargo-msrv/cargo-msrv.tgz -C ~/.cargo-msrv
          echo "Info: ~/.cargo-msrv"
          ls -l ~/.cargo-msrv
          echo "Info: ~/.cargo-msrv/$CARGO_MSRV_DIR"
          ls -l ~/.cargo-msrv/$CARGO_MSRV_DIR
          mv ~/.cargo-msrv/$CARGO_MSRV_DIR/cargo-msrv ~/.cargo/bin
          chmod 755 ~/.cargo/bin/cargo-msrv
          echo "Info: ~/.cargo/bin"
          ls -l ~/.cargo/bin
          # cargo binstall --force --no-confirm cargo-msrv
          echo "Info: cargo msrv --version"
          cargo msrv --version
          echo "Info: PWD=${PWD}"
          SAVED_PWD="${PWD}"
          echo "Info: cd rsvim_cli"
          cd rsvim_cli
          echo "Info: cargo msrv list"
          cargo msrv list
          echo "Info: cargo msrv verify"
          cargo msrv verify
          echo "Info: cd SAVED_PWD=${SAVED_PWD}"
          cd "${SAVED_PWD}"
      - uses: rustsec/audit-check@v2.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: EmbarkStudios/cargo-deny-action@v2
        with:
          command: check advisories --allow unmaintained
      - name: Clippy
        env:
          RUSTC_WRAPPER: "sccache"
          SCCACHE_GHA_ENABLED: "true"
        run: cargo clippy --all-targets --all-features
      - name: Docs
        env:
          RUSTDOCFLAGS: "-Dwarnings"
        run: |
          echo "Info: cargo doc --workspace"
          cargo doc --workspace
  unit_test:
    name: Unit Test
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-22.04-arm, macos-14, macos-13, windows-2022]
    runs-on: ${{ matrix.os }}
    env:
      RUSTC_WRAPPER: "sccache"
      SCCACHE_GHA_ENABLED: "true"
    steps:
      - uses: Swatinem/rust-cache@v2
      - uses: mozilla-actions/sccache-action@v0.0.9
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/checkout@v4
      - name: Cargo test
        run: |
          cargo test --all-features --workspace
      - uses: taiki-e/install-action@cargo-llvm-cov
      - uses: taiki-e/install-action@nextest
      - name: Cargo nextest with code coverage
        run: |
          cargo llvm-cov clean --workspace
          cargo llvm-cov nextest --all-features --workspace --lcov --output-path lcov.info
      - uses: codecov/codecov-action@v5
        # if: ${{ ! (startsWith(matrix.os, 'ubuntu') && endsWith(matrix.os, 'arm' )) }}
        with:
          fail_ci_if_error: true
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
  release_build:
    name: Release Build
    runs-on: ubuntu-22.04
    env:
      RUSTC_WRAPPER: "sccache"
      SCCACHE_GHA_ENABLED: "true"
    steps:
      - uses: Swatinem/rust-cache@v2
      - uses: mozilla-actions/sccache-action@v0.0.9
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/checkout@v4
      - name: Cargo Build
        run: |
          cargo build --release
          ./target/release/rsvim --version
