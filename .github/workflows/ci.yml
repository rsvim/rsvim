name: CI
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}
env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 3
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"
  RUST_BACKTRACE: "full"
jobs:
  pr:
    name: PR
    runs-on: ubuntu-latest
    if: ${{ github.ref != 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v4
      - uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: crate-ci/typos@master
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: miri,rust-src
      - uses: mozilla-actions/sccache-action@v0.0.8
      - uses: actions/checkout@v4
      - name: (Experimental) Cargo miri
        env:
          MIRIFLAGS: "-Zmiri-disable-isolation -Zmiri-permissive-provenance"
          RUSTC_WRAPPER: "sccache"
          SCCACHE_GHA_ENABLED: "true"
          SCCACHE_GHA_VERSION: "v0.2"
        # Disable simd features
        run: |
          sed -i 's/ropey[[:space:]]*=[[:space:]]*{/ropey = { default-features=false, features=["unicode_lines"],/' Cargo.toml
          sed -i 's/ropey[[:space:]]*=[[:space:]]*{/ropey = { default-features=false, features=["unicode_lines"],/' ./rsvim_core/Cargo.toml
          git diff --color=always
          cargo +nightly miri test
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: latest
      - name: Prettier
        run: |
          npm install -g prettier
          prettier --version
          echo "show PWD=${PWD}"
          echo "prettier --check *.md **/*.ts"
          prettier --check *.md **/*.ts
      - name: Tsc
        run: |
          npm install -g typescript
          tsc --version
          echo "show PWD=${PWD}"
          echo "tsc"
          tsc
      - uses: dtolnay/rust-toolchain@stable
      - uses: cargo-bins/cargo-binstall@main
      - uses: mozilla-actions/sccache-action@v0.0.8
      - name: Rustfmt
        run: cargo fmt --check
      - name: Taplo
        run: |
          cargo binstall --force --no-confirm taplo-cli
          echo "Info: taplo --version"
          taplo --version
          echo "Info: taplo check"
          taplo check
          echo "Info: taplo fmt --check"
          taplo fmt --check
      - name: Clippy
        env:
          RUSTC_WRAPPER: "sccache"
          SCCACHE_GHA_ENABLED: "true"
          SCCACHE_GHA_VERSION: "v0.2"
        run: cargo clippy --all-targets --all-features
      - name: MSRV
        run: |
          cargo binstall --force --no-confirm cargo-msrv
          echo "Info: cargo msrv --version"
          cargo msrv --version
          echo "Info: PWD=${PWD}"
          SAVED_PWD="${PWD}"
          echo "Info: cd rsvim_cli"
          cd rsvim_cli
          echo "Info: cargo msrv list"
          cargo msrv list
          echo "Info: cargo msrv verify"
          cargo msrv verify
          echo "Info: cd SAVED_PWD=${SAVED_PWD}"
          cd "${SAVED_PWD}"
      - name: Docs
        run: |
          echo "Info: cargo doc --workspace"
          cargo doc --workspace
      - name: Security Audit
        uses: rustsec/audit-check@v2.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Security Advisory
        uses: EmbarkStudios/cargo-deny-action@v2
        with:
          command: check advisories
          # arguments: --all-features --exclude v8 --exclude paste
  unit_test:
    name: Unit Test
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-22.04-arm, macos-14, macos-13, windows-2022]
    runs-on: ${{ matrix.os }}
    env:
      RUSTC_WRAPPER: "sccache"
      SCCACHE_GHA_ENABLED: "true"
      SCCACHE_GHA_VERSION: "v0.2"
    steps:
      - uses: dtolnay/rust-toolchain@stable
      - uses: mozilla-actions/sccache-action@v0.0.8
      - uses: actions/checkout@v4
      - name: Cargo test
        run: |
          cargo test --all-features --workspace
      - uses: taiki-e/install-action@cargo-llvm-cov
      - uses: taiki-e/install-action@nextest
      - name: Cargo nextest with code coverage
        run: |
          cargo llvm-cov clean --workspace
          cargo llvm-cov nextest --all-features --workspace --lcov --output-path lcov.info
      - uses: codecov/codecov-action@v4
        if: ${{ ! (startsWith(matrix.os, 'ubuntu') && endsWith(matrix.os, 'arm' )) }}
        with:
          fail_ci_if_error: true
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
